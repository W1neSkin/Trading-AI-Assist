stages:
  - validate
  - test
  - security
  - build
  - deploy-staging
  - deploy-production

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  AWS_DEFAULT_REGION: us-east-1
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

# Global before_script
before_script:
  - python --version
  - pip install --upgrade pip

# Templates
.python_template: &python_template
  image: python:$PYTHON_VERSION-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq git curl
    - pip install --upgrade pip
    - pip install -r requirements.txt

.docker_template: &docker_template
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker info

.aws_template: &aws_template
  image: amazon/aws-cli:latest
  before_script:
    - aws --version
    - aws sts get-caller-identity

# Validation Stage
lint-python:
  <<: *python_template
  stage: validate
  script:
    - echo "Running Python linting..."
    - black --check --diff .
    - isort --check-only --diff .
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  artifacts:
    reports:
      codequality: flake8-report.json
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

type-check:
  <<: *python_template
  stage: validate
  script:
    - echo "Running type checking..."
    - mypy services/ shared/ --ignore-missing-imports
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

validate-infrastructure:
  image: node:$NODE_VERSION
  stage: validate
  before_script:
    - npm install -g aws-cdk@latest
    - cd infrastructure
    - npm install
  script:
    - echo "Validating CDK infrastructure..."
    - cdk synth --all
    - cdk diff --all || true
  artifacts:
    paths:
      - infrastructure/cdk.out/
    expire_in: 1 hour
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Testing Stage
unit-tests:
  <<: *python_template
  stage: test
  script:
    - echo "Running unit tests..."
    - pytest tests/unit/ -v --cov=services --cov=shared --cov-report=xml --cov-report=html
    - coverage report
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

integration-tests:
  <<: *python_template
  stage: test
  services:
    - postgres:15-alpine
    - mongo:7.0
    - redis:7-alpine
    - rabbitmq:3-management
  variables:
    POSTGRES_DB: test_trading_platform
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
    POSTGRES_HOST_AUTH_METHOD: trust
    DATABASE_URL: postgresql://test_user:test_password@postgres:5432/test_trading_platform
    MONGODB_URL: mongodb://mongo:27017
    REDIS_URL: redis://redis:6379
    RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
  script:
    - echo "Running integration tests..."
    - pytest tests/integration/ -v --tb=short
  artifacts:
    reports:
      junit: integration-test-report.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

api-tests:
  <<: *python_template
  stage: test
  script:
    - echo "Running API tests..."
    - pytest tests/api/ -v
  artifacts:
    reports:
      junit: api-test-report.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Security Stage
security-scan:
  <<: *python_template
  stage: security
  script:
    - echo "Running security scans..."
    - pip install safety bandit semgrep
    - safety check --json --output safety-report.json || true
    - bandit -r . -f json -o bandit-report.json || true
    - semgrep --config=auto . --json --output=semgrep-report.json || true
  artifacts:
    reports:
      sast: 
        - bandit-report.json
        - semgrep-report.json
    paths:
      - safety-report.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

container-scan:
  <<: *docker_template
  stage: security
  script:
    - echo "Scanning container images for vulnerabilities..."
    - docker build -t ai-trading-platform:$CI_COMMIT_SHA .
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock 
        -v $PWD:/tmp/.cache/ aquasec/trivy:latest 
        image --exit-code 0 --no-progress --format json 
        --output /tmp/.cache/trivy-report.json ai-trading-platform:$CI_COMMIT_SHA
  artifacts:
    reports:
      container_scanning: trivy-report.json
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Build Stage
build-images:
  <<: *docker_template
  stage: build
  script:
    - echo "Building Docker images..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    
    # Build and push API Gateway
    - docker build -t $CI_REGISTRY_IMAGE/api-gateway:$CI_COMMIT_SHA services/api-gateway/
    - docker push $CI_REGISTRY_IMAGE/api-gateway:$CI_COMMIT_SHA
    
    # Build and push User Service
    - docker build -t $CI_REGISTRY_IMAGE/user-service:$CI_COMMIT_SHA services/user-service/
    - docker push $CI_REGISTRY_IMAGE/user-service:$CI_COMMIT_SHA
    
    # Build and push Trading Service
    - docker build -t $CI_REGISTRY_IMAGE/trading-service:$CI_COMMIT_SHA services/trading-service/
    - docker push $CI_REGISTRY_IMAGE/trading-service:$CI_COMMIT_SHA
    
    # Build and push AI Service
    - docker build -t $CI_REGISTRY_IMAGE/ai-service:$CI_COMMIT_SHA services/ai-service/
    - docker push $CI_REGISTRY_IMAGE/ai-service:$CI_COMMIT_SHA
    
    # Build and push Payment Service
    - docker build -t $CI_REGISTRY_IMAGE/payment-service:$CI_COMMIT_SHA services/payment-service/
    - docker push $CI_REGISTRY_IMAGE/payment-service:$CI_COMMIT_SHA
    
    # Build and push Notification Service
    - docker build -t $CI_REGISTRY_IMAGE/notification-service:$CI_COMMIT_SHA services/notification-service/
    - docker push $CI_REGISTRY_IMAGE/notification-service:$CI_COMMIT_SHA
    
    # Build and push Document Service
    - docker build -t $CI_REGISTRY_IMAGE/document-service:$CI_COMMIT_SHA services/document-service/
    - docker push $CI_REGISTRY_IMAGE/document-service:$CI_COMMIT_SHA
    
    # Tag latest for main branch
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        for service in api-gateway user-service trading-service ai-service payment-service notification-service document-service; do
          docker tag $CI_REGISTRY_IMAGE/$service:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/$service:latest
          docker push $CI_REGISTRY_IMAGE/$service:latest
        done
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Staging Deployment
deploy-infrastructure-staging:
  <<: *aws_template
  stage: deploy-staging
  image: node:$NODE_VERSION
  before_script:
    - npm install -g aws-cdk@latest
    - cd infrastructure
    - npm install
  script:
    - echo "Deploying infrastructure to staging..."
    - cdk deploy --all --require-approval=never --context environment=staging
  environment:
    name: staging
    url: https://staging-api.ai-trading-platform.com
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

deploy-services-staging:
  image: amazon/aws-cli:latest
  stage: deploy-staging
  before_script:
    - aws --version
    - pip install awscli-plugin-endpoint
  script:
    - echo "Deploying services to staging ECS..."
    
    # Update ECS services with new image tags
    - |
      for service in api-gateway user-service trading-service ai-service payment-service notification-service document-service; do
        aws ecs update-service \
          --cluster ai-trading-platform-staging \
          --service $service-staging \
          --force-new-deployment \
          --task-definition $service-staging:$CI_COMMIT_SHA
      done
    
    # Wait for deployments to complete
    - |
      for service in api-gateway user-service trading-service ai-service payment-service notification-service document-service; do
        aws ecs wait services-stable \
          --cluster ai-trading-platform-staging \
          --services $service-staging
      done
  environment:
    name: staging
    url: https://staging-api.ai-trading-platform.com
  dependencies:
    - deploy-infrastructure-staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

# Production Deployment
deploy-infrastructure-production:
  <<: *aws_template
  stage: deploy-production
  image: node:$NODE_VERSION
  before_script:
    - npm install -g aws-cdk@latest
    - cd infrastructure
    - npm install
  script:
    - echo "Deploying infrastructure to production..."
    - cdk deploy --all --require-approval=never --context environment=production
  environment:
    name: production
    url: https://api.ai-trading-platform.com
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

deploy-services-production:
  image: amazon/aws-cli:latest
  stage: deploy-production
  before_script:
    - aws --version
    - pip install awscli-plugin-endpoint
  script:
    - echo "Deploying services to production ECS..."
    
    # Blue-Green deployment strategy
    - echo "Starting blue-green deployment..."
    
    # Update ECS services with new image tags
    - |
      for service in api-gateway user-service trading-service ai-service payment-service notification-service document-service; do
        echo "Updating $service..."
        aws ecs update-service \
          --cluster ai-trading-platform-production \
          --service $service-production \
          --force-new-deployment \
          --task-definition $service-production:$CI_COMMIT_SHA
        
        # Wait for service to be stable
        aws ecs wait services-stable \
          --cluster ai-trading-platform-production \
          --services $service-production \
          --cli-read-timeout 900 \
          --cli-connect-timeout 60
        
        echo "$service deployment completed successfully"
      done
    
    # Run smoke tests
    - echo "Running post-deployment smoke tests..."
    - curl -f https://api.ai-trading-platform.com/health || exit 1
    
  environment:
    name: production
    url: https://api.ai-trading-platform.com
  dependencies:
    - deploy-infrastructure-production
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

# Rollback capability
rollback-production:
  image: amazon/aws-cli:latest
  stage: deploy-production
  script:
    - echo "Rolling back production deployment..."
    - |
      for service in api-gateway user-service trading-service ai-service payment-service notification-service document-service; do
        # Get previous task definition
        PREVIOUS_TD=$(aws ecs describe-services \
          --cluster ai-trading-platform-production \
          --services $service-production \
          --query 'services[0].deployments[1].taskDefinition' \
          --output text)
        
        if [ "$PREVIOUS_TD" != "None" ]; then
          aws ecs update-service \
            --cluster ai-trading-platform-production \
            --service $service-production \
            --task-definition $PREVIOUS_TD
        fi
      done
  environment:
    name: production
    url: https://api.ai-trading-platform.com
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

# Performance testing
performance-tests:
  image: python:$PYTHON_VERSION-slim
  stage: test
  before_script:
    - pip install locust requests
  script:
    - echo "Running performance tests..."
    - cd tests/performance
    - locust --headless -u 100 -r 10 -t 300s --host=https://staging-api.ai-trading-platform.com
  artifacts:
    reports:
      performance: performance-report.html
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

# Database migrations
migrate-staging:
  <<: *python_template
  stage: deploy-staging
  script:
    - echo "Running database migrations for staging..."
    - cd scripts
    - python migrate.py --environment=staging
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

migrate-production:
  <<: *python_template
  stage: deploy-production
  script:
    - echo "Running database migrations for production..."
    - cd scripts
    - python migrate.py --environment=production
  environment:
    name: production
  rules:
    - if: $CI_COMMIT_TAG
  when: manual 